<class
    name = "mlm_client"
    title = "Malamute Client"
    script = "zproto_client_c"
    protocol_class = "mlm_msg"
    package_dir = "../include"
    project_header = "../include/malamute.h"
    >
    This is a client implementation of the Malamute Protocol
    <include filename = "license.xml" />

    <state name = "start">
        <event name = "constructor" next = "connecting">
            <action name = "connect to server endpoint" />
            <action name = "use connect timeout" />
            <action name = "send" message = "CONNECTION OPEN" />
        </event>
    </state>

    <state name = "connecting" inherit = "defaults">
        <event name = "OK" next = "connected">
            <action name = "signal success" />
            <action name = "use heartbeat timer" />
        </event>
        <event name = "expired">
            <action name = "signal server not present" />
            <action name = "terminate" />
        </event>
    </state>
    
    <state name = "connected" inherit = "defaults">
        <event name = "attach" next = "confirming">
            <action name = "prepare for stream write" />
            <action name = "send" message = "STREAM WRITE" />
        </event>
        <event name = "subscribe" next = "confirming">
            <action name = "prepare for stream read" />
            <action name = "send" message = "STREAM READ" />
        </event>
        <event name = "send">
            <action name = "prepare for stream publish" />
            <action name = "send" message = "STREAM PUBLISH" />
        </event>
        <event name = "destructor" next = "disconnecting">
            <action name = "send" message = "CONNECTION CLOSE" />
        </event>
        <event name = "STREAM DELIVER">
            <action name = "deliver message to application" />
        </event>
        <event name = "expired">
            <action name = "send" message = "CONNECTION PING" />
        </event>
        <event name = "error">
            <action name = "terminate" />
        </event>
    </state>

    <state name = "confirming" inherit = "defaults">
        <event name = "OK" next = "connected">
            <action name = "signal success" />
        </event>
        <event name = "ERROR">
            <action name = "signal failure" />
            <action name = "terminate" />
        </event>
    </state>

    <state name = "disconnecting" inherit = "defaults">
        <event name = "OK">
            <action name = "signal success" />
            <action name = "terminate" />
        </event>
        <event name = "expired">
            <action name = "signal failure" />
            <action name = "terminate" />
        </event>
    </state>

    <state name = "defaults">
        <event name = "CONNECTION PONG">
        </event>
        <event name = "ERROR" next = "have error">
            <action name = "check status code" />
        </event>
        <event name = "*">
            <!-- Discard any other incoming events -->
        </event>
    </state>

    <state name = "have error">
        <event name = "command invalid" next = "reconnecting">
            <action name = "use connect timeout" />
            <action name = "send" message = "CONNECTION OPEN" />
        </event>
        <event name = "other">
            <action name = "signal unhandled error" />
            <action name = "terminate" />
        </event>
    </state>
   
    <state name = "reconnecting" inherit = "defaults">
        <event name = "OK" next = "connected">
            <action name = "use heartbeat timer" />
        </event>
    </state>

    <!-- API methods -->
    <method name = "constructor" return = "status">
    Connect to server endpoint, with specified timeout in msecs (zero means
    wait forever). Constructor succeeds if connection is successful.
        <field name = "endpoint" type = "string" />
        <field name = "timeout" type = "number" />
        <accept reply = "SUCCESS" />
        <accept reply = "FAILURE" />
    </method>

    <method name = "destructor" return = "status">
    Disconnect from server. Waits for a short timeout for confirmation from
    the server, then disconnects anyhow.
        <accept reply = "SUCCESS" />
        <accept reply = "FAILURE" />
    </method>
    
    <reply name = "SUCCESS">
        <field name = "status" type = "number" />
    </reply>

    <reply name = "FAILURE">
        <field name = "status" type = "number" />
        <field name = "reason" type = "string" />
    </reply>

    <method name = "attach" return = "status">
    Attach to specified stream, as publisher.
        <field name = "stream" type = "string" />
        <accept reply = "SUCCESS" />
        <accept reply = "FAILURE" />
    </method>
    
    <method name = "subscribe">
    Subscribe to all messages sent to matching addresses. The pattern is a
    regular expression using the CZMQ zrex syntax. The most useful elements
    are: ^ and $ to match the start and end, . to match any character,
    \s and \S to match whitespace and non-whitespace, \d and \D to match a
    digit and non-digit, \a and \A to match alphabetic and non-alphabetic,
    \w and \W to match alphanumeric and non-alphanumeric, + for one or more
    repetitions, * for zero or more repetitions, and ( ) to create groups.
    Returns 0 if subscription was successful, else -1.
        <field name = "stream" type = "string" />
        <field name = "pattern" type = "string" />
        <accept reply = "SUCCESS" />
        <accept reply = "FAILURE" />
    </method>

    <method name = "send">
    Send a message to the current stream. The server does not store messages.
    If a message is published before subscribers arrive, they will miss it.
    Currently only supports string contents. Does not return a status value;
    send commands are asynchronous and unconfirmed.
        <field name = "subject" type = "string" />
        <field name = "content" type = "string" />
    </method>
    
    <method name = "recv" return = "content" immediate = "1">
    Receive next message from server. Returns the message content, as a string,
    if any. The caller should not modify or free this string.
        <accept reply = "MESSAGE" />
    </method>

    <!-- These are the replies from the actor to the API -->
    <reply name = "MESSAGE">
        <field name = "sender" type = "string" />
        <field name = "subject" type = "string" />
        <field name = "content" type = "string" />
    </reply>
</class>
