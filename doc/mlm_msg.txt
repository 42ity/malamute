mlm_msg(3)
==========

NAME
----
mlm_msg - The Malamute Protocol

SYNOPSIS
--------
----
//  Create a new empty mlm_msg
mlm_msg_t *
    mlm_msg_new (void);

//  Destroy a mlm_msg instance
void
    mlm_msg_destroy (mlm_msg_t **self_p);

//  Receive a mlm_msg from the socket. Returns 0 if OK, -1 if
//  there was an error. Blocks if there is no message waiting.
int
    mlm_msg_recv (mlm_msg_t *self, zsock_t *input);

//  Send the mlm_msg to the output socket, does not destroy it
int
    mlm_msg_send (mlm_msg_t *self, zsock_t *output);
    
//  Print contents of message to stdout
void
    mlm_msg_print (mlm_msg_t *self);

//  Get/set the message routing id
zframe_t *
    mlm_msg_routing_id (mlm_msg_t *self);
void
    mlm_msg_set_routing_id (mlm_msg_t *self, zframe_t *routing_id);

//  Get the mlm_msg id and printable command
int
    mlm_msg_id (mlm_msg_t *self);
void
    mlm_msg_set_id (mlm_msg_t *self, int id);
const char *
    mlm_msg_command (mlm_msg_t *self);

//  Get/set the address field
const char *
    mlm_msg_address (mlm_msg_t *self);
void
    mlm_msg_set_address (mlm_msg_t *self, const char *value);

//  Get/set the stream field
const char *
    mlm_msg_stream (mlm_msg_t *self);
void
    mlm_msg_set_stream (mlm_msg_t *self, const char *value);

//  Get/set the pattern field
const char *
    mlm_msg_pattern (mlm_msg_t *self);
void
    mlm_msg_set_pattern (mlm_msg_t *self, const char *value);

//  Get/set the subject field
const char *
    mlm_msg_subject (mlm_msg_t *self);
void
    mlm_msg_set_subject (mlm_msg_t *self, const char *value);

//  Get a copy of the content field
zmsg_t *
    mlm_msg_content (mlm_msg_t *self);
//  Get the content field and transfer ownership to caller
zmsg_t *
    mlm_msg_get_content (mlm_msg_t *self);
//  Set the content field, transferring ownership from caller
void
    mlm_msg_set_content (mlm_msg_t *self, zmsg_t **msg_p);

//  Get/set the sender field
const char *
    mlm_msg_sender (mlm_msg_t *self);
void
    mlm_msg_set_sender (mlm_msg_t *self, const char *value);

//  Get/set the tracker field
const char *
    mlm_msg_tracker (mlm_msg_t *self);
void
    mlm_msg_set_tracker (mlm_msg_t *self, const char *value);

//  Get/set the timeout field
uint32_t
    mlm_msg_timeout (mlm_msg_t *self);
void
    mlm_msg_set_timeout (mlm_msg_t *self, uint32_t timeout);

//  Get/set the service field
const char *
    mlm_msg_service (mlm_msg_t *self);
void
    mlm_msg_set_service (mlm_msg_t *self, const char *value);

//  Get/set the status_code field
uint16_t
    mlm_msg_status_code (mlm_msg_t *self);
void
    mlm_msg_set_status_code (mlm_msg_t *self, uint16_t status_code);

//  Get/set the status_reason field
const char *
    mlm_msg_status_reason (mlm_msg_t *self);
void
    mlm_msg_set_status_reason (mlm_msg_t *self, const char *value);

//  Get/set the amount field
uint16_t
    mlm_msg_amount (mlm_msg_t *self);
void
    mlm_msg_set_amount (mlm_msg_t *self, uint16_t amount);

//  Self test of this class
int
    mlm_msg_test (bool verbose);
----

DESCRIPTION
-----------

mlm_msg - The Malamute Protocol

Please add @discuss section in ../src/mlm_msg.c.

EXAMPLE
-------
.From mlm_msg_test method
----
//  Simple create/destroy test
mlm_msg_t *self = mlm_msg_new ();
assert (self);
mlm_msg_destroy (&self);

//  Create pair of sockets we can send through
zsock_t *input = zsock_new (ZMQ_ROUTER);
assert (input);
zsock_connect (input, "inproc://selftest-mlm_msg");

zsock_t *output = zsock_new (ZMQ_DEALER);
assert (output);
zsock_bind (output, "inproc://selftest-mlm_msg");

//  Encode/send/decode and verify each message type
int instance;
self = mlm_msg_new ();
mlm_msg_set_id (self, MLM_MSG_CONNECTION_OPEN);

mlm_msg_set_address (self, "Life is short but Now lasts for ever");
//  Send twice
mlm_msg_send (self, output);
mlm_msg_send (self, output);

for (instance = 0; instance < 2; instance++) {
    mlm_msg_destroy (&self);
    self = mlm_msg_new ();
    mlm_msg_recv (self, input);
    assert (mlm_msg_routing_id (self));
    assert (streq (mlm_msg_address (self), "Life is short but Now lasts for ever"));
}
mlm_msg_set_id (self, MLM_MSG_CONNECTION_PING);

//  Send twice
mlm_msg_send (self, output);
mlm_msg_send (self, output);

for (instance = 0; instance < 2; instance++) {
    mlm_msg_destroy (&self);
    self = mlm_msg_new ();
    mlm_msg_recv (self, input);
    assert (mlm_msg_routing_id (self));
}
mlm_msg_set_id (self, MLM_MSG_CONNECTION_PONG);

//  Send twice
mlm_msg_send (self, output);
mlm_msg_send (self, output);

for (instance = 0; instance < 2; instance++) {
    mlm_msg_destroy (&self);
    self = mlm_msg_new ();
    mlm_msg_recv (self, input);
    assert (mlm_msg_routing_id (self));
}
mlm_msg_set_id (self, MLM_MSG_CONNECTION_CLOSE);

//  Send twice
mlm_msg_send (self, output);
mlm_msg_send (self, output);

for (instance = 0; instance < 2; instance++) {
    mlm_msg_destroy (&self);
    self = mlm_msg_new ();
    mlm_msg_recv (self, input);
    assert (mlm_msg_routing_id (self));
}
mlm_msg_set_id (self, MLM_MSG_STREAM_WRITE);

mlm_msg_set_stream (self, "Life is short but Now lasts for ever");
//  Send twice
mlm_msg_send (self, output);
mlm_msg_send (self, output);

for (instance = 0; instance < 2; instance++) {
    mlm_msg_destroy (&self);
    self = mlm_msg_new ();
    mlm_msg_recv (self, input);
    assert (mlm_msg_routing_id (self));
    assert (streq (mlm_msg_stream (self), "Life is short but Now lasts for ever"));
}
mlm_msg_set_id (self, MLM_MSG_STREAM_READ);

mlm_msg_set_stream (self, "Life is short but Now lasts for ever");
mlm_msg_set_pattern (self, "Life is short but Now lasts for ever");
//  Send twice
mlm_msg_send (self, output);
mlm_msg_send (self, output);

for (instance = 0; instance < 2; instance++) {
    mlm_msg_destroy (&self);
    self = mlm_msg_new ();
    mlm_msg_recv (self, input);
    assert (mlm_msg_routing_id (self));
    assert (streq (mlm_msg_stream (self), "Life is short but Now lasts for ever"));
    assert (streq (mlm_msg_pattern (self), "Life is short but Now lasts for ever"));
}
mlm_msg_set_id (self, MLM_MSG_STREAM_PUBLISH);

mlm_msg_set_subject (self, "Life is short but Now lasts for ever");
zmsg_t *stream_publish_content = zmsg_new ();
mlm_msg_set_content (self, &stream_publish_content);
zmsg_addstr (mlm_msg_content (self), "Hello, World");
//  Send twice
mlm_msg_send (self, output);
mlm_msg_send (self, output);

for (instance = 0; instance < 2; instance++) {
    mlm_msg_destroy (&self);
    self = mlm_msg_new ();
    mlm_msg_recv (self, input);
    assert (mlm_msg_routing_id (self));
    assert (streq (mlm_msg_subject (self), "Life is short but Now lasts for ever"));
    assert (zmsg_size (mlm_msg_content (self)) == 1);
}
mlm_msg_set_id (self, MLM_MSG_STREAM_DELIVER);

mlm_msg_set_stream (self, "Life is short but Now lasts for ever");
mlm_msg_set_sender (self, "Life is short but Now lasts for ever");
mlm_msg_set_subject (self, "Life is short but Now lasts for ever");
zmsg_t *stream_deliver_content = zmsg_new ();
mlm_msg_set_content (self, &stream_deliver_content);
zmsg_addstr (mlm_msg_content (self), "Hello, World");
//  Send twice
mlm_msg_send (self, output);
mlm_msg_send (self, output);

for (instance = 0; instance < 2; instance++) {
    mlm_msg_destroy (&self);
    self = mlm_msg_new ();
    mlm_msg_recv (self, input);
    assert (mlm_msg_routing_id (self));
    assert (streq (mlm_msg_stream (self), "Life is short but Now lasts for ever"));
    assert (streq (mlm_msg_sender (self), "Life is short but Now lasts for ever"));
    assert (streq (mlm_msg_subject (self), "Life is short but Now lasts for ever"));
    assert (zmsg_size (mlm_msg_content (self)) == 1);
}
mlm_msg_set_id (self, MLM_MSG_MAILBOX_SEND);

mlm_msg_set_address (self, "Life is short but Now lasts for ever");
mlm_msg_set_subject (self, "Life is short but Now lasts for ever");
mlm_msg_set_tracker (self, "Life is short but Now lasts for ever");
mlm_msg_set_timeout (self, 123);
zmsg_t *mailbox_send_content = zmsg_new ();
mlm_msg_set_content (self, &mailbox_send_content);
zmsg_addstr (mlm_msg_content (self), "Hello, World");
//  Send twice
mlm_msg_send (self, output);
mlm_msg_send (self, output);

for (instance = 0; instance < 2; instance++) {
    mlm_msg_destroy (&self);
    self = mlm_msg_new ();
    mlm_msg_recv (self, input);
    assert (mlm_msg_routing_id (self));
    assert (streq (mlm_msg_address (self), "Life is short but Now lasts for ever"));
    assert (streq (mlm_msg_subject (self), "Life is short but Now lasts for ever"));
    assert (streq (mlm_msg_tracker (self), "Life is short but Now lasts for ever"));
    assert (mlm_msg_timeout (self) == 123);
    assert (zmsg_size (mlm_msg_content (self)) == 1);
}
mlm_msg_set_id (self, MLM_MSG_MAILBOX_DELIVER);

mlm_msg_set_sender (self, "Life is short but Now lasts for ever");
mlm_msg_set_address (self, "Life is short but Now lasts for ever");
mlm_msg_set_subject (self, "Life is short but Now lasts for ever");
mlm_msg_set_tracker (self, "Life is short but Now lasts for ever");
zmsg_t *mailbox_deliver_content = zmsg_new ();
mlm_msg_set_content (self, &mailbox_deliver_content);
zmsg_addstr (mlm_msg_content (self), "Hello, World");
//  Send twice
mlm_msg_send (self, output);
mlm_msg_send (self, output);

for (instance = 0; instance < 2; instance++) {
    mlm_msg_destroy (&self);
    self = mlm_msg_new ();
    mlm_msg_recv (self, input);
    assert (mlm_msg_routing_id (self));
    assert (streq (mlm_msg_sender (self), "Life is short but Now lasts for ever"));
    assert (streq (mlm_msg_address (self), "Life is short but Now lasts for ever"));
    assert (streq (mlm_msg_subject (self), "Life is short but Now lasts for ever"));
    assert (streq (mlm_msg_tracker (self), "Life is short but Now lasts for ever"));
    assert (zmsg_size (mlm_msg_content (self)) == 1);
}
mlm_msg_set_id (self, MLM_MSG_SERVICE_SEND);

mlm_msg_set_service (self, "Life is short but Now lasts for ever");
mlm_msg_set_subject (self, "Life is short but Now lasts for ever");
mlm_msg_set_tracker (self, "Life is short but Now lasts for ever");
mlm_msg_set_timeout (self, 123);
zmsg_t *service_send_content = zmsg_new ();
mlm_msg_set_content (self, &service_send_content);
zmsg_addstr (mlm_msg_content (self), "Hello, World");
//  Send twice
mlm_msg_send (self, output);
mlm_msg_send (self, output);

for (instance = 0; instance < 2; instance++) {
    mlm_msg_destroy (&self);
    self = mlm_msg_new ();
    mlm_msg_recv (self, input);
    assert (mlm_msg_routing_id (self));
    assert (streq (mlm_msg_service (self), "Life is short but Now lasts for ever"));
    assert (streq (mlm_msg_subject (self), "Life is short but Now lasts for ever"));
    assert (streq (mlm_msg_tracker (self), "Life is short but Now lasts for ever"));
    assert (mlm_msg_timeout (self) == 123);
    assert (zmsg_size (mlm_msg_content (self)) == 1);
}
mlm_msg_set_id (self, MLM_MSG_SERVICE_OFFER);

mlm_msg_set_service (self, "Life is short but Now lasts for ever");
mlm_msg_set_pattern (self, "Life is short but Now lasts for ever");
//  Send twice
mlm_msg_send (self, output);
mlm_msg_send (self, output);

for (instance = 0; instance < 2; instance++) {
    mlm_msg_destroy (&self);
    self = mlm_msg_new ();
    mlm_msg_recv (self, input);
    assert (mlm_msg_routing_id (self));
    assert (streq (mlm_msg_service (self), "Life is short but Now lasts for ever"));
    assert (streq (mlm_msg_pattern (self), "Life is short but Now lasts for ever"));
}
mlm_msg_set_id (self, MLM_MSG_SERVICE_DELIVER);

mlm_msg_set_sender (self, "Life is short but Now lasts for ever");
mlm_msg_set_service (self, "Life is short but Now lasts for ever");
mlm_msg_set_subject (self, "Life is short but Now lasts for ever");
mlm_msg_set_tracker (self, "Life is short but Now lasts for ever");
zmsg_t *service_deliver_content = zmsg_new ();
mlm_msg_set_content (self, &service_deliver_content);
zmsg_addstr (mlm_msg_content (self), "Hello, World");
//  Send twice
mlm_msg_send (self, output);
mlm_msg_send (self, output);

for (instance = 0; instance < 2; instance++) {
    mlm_msg_destroy (&self);
    self = mlm_msg_new ();
    mlm_msg_recv (self, input);
    assert (mlm_msg_routing_id (self));
    assert (streq (mlm_msg_sender (self), "Life is short but Now lasts for ever"));
    assert (streq (mlm_msg_service (self), "Life is short but Now lasts for ever"));
    assert (streq (mlm_msg_subject (self), "Life is short but Now lasts for ever"));
    assert (streq (mlm_msg_tracker (self), "Life is short but Now lasts for ever"));
    assert (zmsg_size (mlm_msg_content (self)) == 1);
}
mlm_msg_set_id (self, MLM_MSG_OK);

mlm_msg_set_status_code (self, 123);
mlm_msg_set_status_reason (self, "Life is short but Now lasts for ever");
//  Send twice
mlm_msg_send (self, output);
mlm_msg_send (self, output);

for (instance = 0; instance < 2; instance++) {
    mlm_msg_destroy (&self);
    self = mlm_msg_new ();
    mlm_msg_recv (self, input);
    assert (mlm_msg_routing_id (self));
    assert (mlm_msg_status_code (self) == 123);
    assert (streq (mlm_msg_status_reason (self), "Life is short but Now lasts for ever"));
}
mlm_msg_set_id (self, MLM_MSG_ERROR);

mlm_msg_set_status_code (self, 123);
mlm_msg_set_status_reason (self, "Life is short but Now lasts for ever");
//  Send twice
mlm_msg_send (self, output);
mlm_msg_send (self, output);

for (instance = 0; instance < 2; instance++) {
    mlm_msg_destroy (&self);
    self = mlm_msg_new ();
    mlm_msg_recv (self, input);
    assert (mlm_msg_routing_id (self));
    assert (mlm_msg_status_code (self) == 123);
    assert (streq (mlm_msg_status_reason (self), "Life is short but Now lasts for ever"));
}
mlm_msg_set_id (self, MLM_MSG_CREDIT);

mlm_msg_set_amount (self, 123);
//  Send twice
mlm_msg_send (self, output);
mlm_msg_send (self, output);

for (instance = 0; instance < 2; instance++) {
    mlm_msg_destroy (&self);
    self = mlm_msg_new ();
    mlm_msg_recv (self, input);
    assert (mlm_msg_routing_id (self));
    assert (mlm_msg_amount (self) == 123);
}
mlm_msg_set_id (self, MLM_MSG_CONFIRM);

mlm_msg_set_tracker (self, "Life is short but Now lasts for ever");
mlm_msg_set_status_code (self, 123);
mlm_msg_set_status_reason (self, "Life is short but Now lasts for ever");
//  Send twice
mlm_msg_send (self, output);
mlm_msg_send (self, output);

for (instance = 0; instance < 2; instance++) {
    mlm_msg_destroy (&self);
    self = mlm_msg_new ();
    mlm_msg_recv (self, input);
    assert (mlm_msg_routing_id (self));
    assert (streq (mlm_msg_tracker (self), "Life is short but Now lasts for ever"));
    assert (mlm_msg_status_code (self) == 123);
    assert (streq (mlm_msg_status_reason (self), "Life is short but Now lasts for ever"));
}

zsock_destroy (&input);
zsock_destroy (&output);
----

SEE ALSO
--------
linkczmq:czmq[7]
